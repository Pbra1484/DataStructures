<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2712</x>
      <y>1602</y>
      <w>180</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Timer
--

--
-clock_t executionTime;
+Timer()
+void startTimer()
+void stopTimer()
+void resetTimer()
+void displayTimerInformation()
+long getExecutionTimeInMicroseconds()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2718</x>
      <y>1752</y>
      <w>228</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData:int
- nodePointer:IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int stuff) : void
+ setNodePointer(IntNode *) : void
+ IntNode() : constructor
+ IntNode(int value) : constructor
+ IntNode(int value, IntNode * nextNode) : constructor
group=1
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2718</x>
      <y>1902</y>
      <w>168</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) :constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
group=1
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2706</x>
      <y>1728</y>
      <w>288</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>Int Array
--
bg=orange
group=1
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1524</x>
      <y>2208</y>
      <w>246</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- nodeData : Type
- nodeData :	Node&lt;Type&gt; *
--
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void
layer=3
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2802</x>
      <y>1854</y>
      <w>18</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2058</x>
      <y>2100</y>
      <w>294</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
- frond : Node&lt;Type&gt; *
- size : int
--
+ Array() : constructor
+ Array(int size) : constructor
+ ~Array&lt;Type&gt;() : destructor

+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor
+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
layer=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2034</x>
      <y>2070</y>
      <w>606</w>
      <h>660</h>
    </coordinates>
    <panel_attributes>Linear
--
bg=orange
layer=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>2196</y>
      <w>306</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
</panel_attributes>
    <additional_attributes>490.0;10.0;370.0;10.0;370.0;120.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2058</x>
      <y>2304</y>
      <w>294</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>2334</y>
      <w>306</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
layer=3</panel_attributes>
    <additional_attributes>490.0;120.0;370.0;120.0;370.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1656</x>
      <y>2430</y>
      <w>294</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructior
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, 
    BiDirectionalNode&lt;Type&gt; * previous, 
    BiDirectiongalNode&lt;Type&gt; * next)

+ getNdoeData() : Type
+ setNodeData(Type data) : void
+ getPrevious() : BiDirectionalNode&lt;Type&gt;
+ setPrevious(BiDirectionalNode&lt;Type&gt; previous) : void
+ getNext() : BidirectionalNode&lt;Type&gt;
+ setNext(BiDirecitonalNode&lt;Type&gt; next) : void

layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1680</x>
      <y>2382</y>
      <w>108</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;160.0;50.0;160.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2058</x>
      <y>2508</y>
      <w>204</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt;*
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt;*
+ getEnd() const : BiDirectionalNode&lt;Type&gt;*

Vitrual methods
+ add(Type value)
+ remove(int)
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1944</x>
      <y>2520</y>
      <w>126</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>190.0;140.0;60.0;140.0;60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2406</x>
      <y>2568</y>
      <w>210</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2406</x>
      <y>2256</y>
      <w>210</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt;*
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
Non vitrual mehtods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual Methods
+ add(Type value)
+ remove(int)

layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2406</x>
      <y>2412</y>
      <w>210</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;TYpe&gt; *
--
+ CircularList() : constructor
+ ~CircularList() : destructor
+ add(Type) : void
+ addAtIndex(int index, Type data) : void

layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2256</x>
      <y>2358</y>
      <w>162</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;300.0;180.0;300.0;180.0;10.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2256</x>
      <y>2514</y>
      <w>162</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;160.0;210.0;160.0;210.0;10.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2256</x>
      <y>2670</y>
      <w>162</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>1908</x>
      <y>0</y>
      <w>12</w>
      <h>42</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1350</x>
      <y>2430</y>
      <w>288</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : BInarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--

+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNOde(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPOinter(BinarySearchTreeNode&lt;Type&gt; * right) : void


layer=3
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1512</x>
      <y>2382</y>
      <w>108</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;160.0;50.0;10.0;50.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2340</x>
      <y>1404</y>
      <w>60</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>726</x>
      <y>2160</y>
      <w>222</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--

+ getSize() : int
+ getHeight() : int
+ isCompleate() : bool
+ isBalanced() : bool


+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remvoe(Type) : void

layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>972</x>
      <y>2118</y>
      <w>264</w>
      <h>246</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ BinerySearchTree() : construtor
+ ~BinerySearchTree() : destructor
+ getRood() : BInarySearchTreeNoder&lt;Type&gt; *
+ setRoot(BinarySearchTreeNoder&lt;Type&gt; * root) : void

- claculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BInarySearchTreeNode&lt;Type&gt; *) : void
- removeNode(BInarySearchTreeNode&lt;Type&gt; *) : void

+ inOrderTraversal() : void
+ preorderTraversal() : void
+ postOrderTraversal() : void
+ printToFile() : void
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
layer=2
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>942</x>
      <y>2262</y>
      <w>42</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
layer=2</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>2298</y>
      <w>132</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0;100.0;330.0;200.0;330.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1332</x>
      <y>2172</y>
      <w>636</w>
      <h>588</h>
    </coordinates>
    <panel_attributes>Nodes
--
bg=blue
layer=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>2382</y>
      <w>432</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>AVLTree
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
--
+ AVLTree() : constructor
+ ~AVLTree() : destructor

- leftRotation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- rightRodation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- leftRightRoation(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- reightLeftRotaion(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- balanceSubTree(BinarySearchTreeNode&lt;Type&gt; * parent) : BinarySearchTreeNode&lt;Type&gt; *
- insertNode(BinarySearchTreeNode&lt;Type&gt; * parent, Type inserted) : BinarySearchTreeNode&lt;Type&gt; *
- removeNdoe(BinarySearchTreeNode&lt;Type&gt; * parent, Type inserted) : BinarySearchTreeNode&lt;Type&gt; *
- heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent) : int

+ insert(Type itemToInsert) : void
+ remove(Type value) : void





</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1044</x>
      <y>2358</y>
      <w>18</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
layer=2</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>2532</y>
      <w>132</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1350</x>
      <y>2628</y>
      <w>216</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>HashNode
--
- data : Type
- key : long
--
+ HashNode() : constructor
+ ~HashNode() : destructor
+ getData() : Type
+ getKey() : long
+ setData(Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>498</x>
      <y>2088</y>
      <w>762</w>
      <h>696</h>
    </coordinates>
    <panel_attributes>EmptyPackage
--
bg=orange
layer=0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>912</x>
      <y>2616</y>
      <w>324</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>HashTable
--
- capacity : long
- size : long
- efficencyPercentage : double
- hashTableStorage : HashNode&lt;Type&gt; * *
--
+ HashTable() : constructor
+ ~HashTable() : destsructor

- isPrime(long sampleNumber) : bool
- resize() : void
- nextPrime() : long
- findPosition(HashNode&lt;Type&gt; * data) : long
- handleCollision(HashNode&lt;Type&gt; * data, long currentPosition) : long


layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>2676</y>
      <w>132</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n
layer=3</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>576</x>
      <y>2886</y>
      <w>168</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>Graph
--
- MAXIMUM : int const
- adjacencyMatrix : bool[][]
- graphData : Type[]
- vertexCount : int
--
+ Graph() : constructor
+ ~Graph() : destructor

- depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVertices[]) : void





</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
